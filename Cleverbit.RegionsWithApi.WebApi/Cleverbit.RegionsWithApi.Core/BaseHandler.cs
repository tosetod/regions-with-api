using Cleverbit.RegionsWithApi.Common.Exceptions;
using Cleverbit.RegionsWithApi.Data;
using Cleverbit.RegionsWithApi.Data.Entities;
using Lamar;
using MediatR;

namespace Cleverbit.RegionsWithApi.Core
{
    public abstract partial class BaseHandler<TRequest, TResponse> : IRequestHandler<TRequest, TResponse>
			where TRequest : BaseRequest<TResponse>
	{
		#region Infrastructure Services

		[SetterProperty]
		public RegionsWithApiDbContext DbContext
		{
			set
			{
				if (_dbContext != null)
					throw new CoreException("DbContext has already beeen initialized!");
				else
					_dbContext = value;
			}
		}
		private RegionsWithApiDbContext _dbContext;


		// _currentLoggedInUser is popuplated by the pipeline
		public CurrentUserModel _currentLoggedInUser { protected get; set; }

		/// <summary>
		/// Use this when you want to do CRUD on the database using Entity Framework
		/// </summary>

		protected RegionsWithApiDbContext _ef => _dbContext;

		/// <summary>
		/// DO NOT INVOKE IN HANDLERS. It's auto-invoked when a handler finishes it's job.
		/// </summary>
		/// <returns></returns>
		public void SaveChanges()
		{
			_dbContext.SaveChanges();
		}

		/// <summary>
		/// Updates an already existing entity
		/// </summary>
		/// <param name="entity">The entity which needs to be updated in the database</param>
		protected void Update(BaseEntity entity)
		{
			if (entity.CreatedBy.Equals(Guid.Empty))
			{
				entity.CreatedBy = _currentLoggedInUser?.Id ?? default;
				entity.CreatedOn = DateTimeOffset.UtcNow;
			}
			entity.ModifiedOn = DateTimeOffset.UtcNow;
			entity.ModifiedBy = _currentLoggedInUser?.Id ?? default;

			if (entity.Id.Equals(Guid.Empty))
				_ef.Add(entity);
			else
				_ef.Update(entity);
		}

		/// <summary>
		/// Adds an entity to the database, and returns its Id
		/// </summary>
		/// <param name="entity">The entity to add in the database</param>
		/// <returns>The Id generated by the database for the added entity</returns>
		protected int Add(BaseEntity entity)
		{
			entity.CreatedOn = DateTimeOffset.UtcNow;
			entity.CreatedBy = _currentLoggedInUser?.Id ?? entity.CreatedBy;
			entity.ModifiedOn = entity.CreatedOn;
			entity.ModifiedBy = entity.CreatedBy;

			return _ef.Add(entity).Entity.Id;
		}

		protected void AddRange(IEnumerable<BaseEntity> entities)
		{
			_ef.AddRange(entities);
		}

		/// <summary>
		/// HARD deletes the given entity from the database.
		/// </summary>
		/// <param name="entity">The entity to be HARD deleted</param>
		protected void Remove(BaseEntity entity)
		{
			_ef.Remove(entity);
		}

		/// <summary>
		/// Returns an entity of type <typeparamref name="EntityType"/> which matches the given Id parameter
		/// </summary>
		/// <typeparam name="EntityType"></typeparam>
		/// <param name="id">Id of the entity to retrive</param>
		/// <returns>Found entity of type <typeparamref name="EntityType"/> if exists, otherwise null</returns>
		protected async Task<EntityType> GetById<EntityType>(Guid id)
			where EntityType : BaseEntity
		{
			return await _ef.FindAsync<EntityType>(id);
		}

		#endregion

		public abstract Task<TResponse> Handle(TRequest request, CancellationToken cancellationToken);
	}
}
